import pandas as pd
import ccxt
import numpy as np
from datetime import datetime, timedelta

# ============================
# Exchange Setup
# ============================
exchange = ccxt.binance({
    'enableRateLimit': True,
    'options': {'adjustForTimeDifference': True}
})

# ============================
# Configurable Parameters
# ============================
FIAT = "EUR"
PROFIT_TARGET = 0.02
MAX_TRADE_EUR = 100
VARIANCE_THRESHOLD = 0.03

# ============================
# Market Filter
# ============================
try:
    markets = exchange.load_markets()
    active_pairs = [
        s for s, m in markets.items()
        if m['active'] and s.endswith(f"/{FIAT}")
    ]
except Exception as e:
    print(f"Error loading markets: {e}")
    raise SystemExit

# ============================
# Symbol Corrections
# ============================
SYMBOL_MAPPING = {
    'BTT/EUR': 'BTTC/EUR',
    'RNDR/EUR': 'RENDER/EUR',
    'FTM/EUR': 'S/EUR',
}

DELISTED_PAIRS = {
    'CHZ/EUR', 'ID/EUR', 'MDT/BTC'
}

# ============================
# Indicators
# ============================
def calculate_indicators(df):
    if len(df) < 25:
        return pd.DataFrame()

    df['3_EMA'] = df['Close'].ewm(span=3, adjust=False).mean()
    df['10_EMA'] = df['Close'].ewm(span=5, adjust=False).mean()

    delta = df['Close'].diff()
    gain = delta.where(delta > 0, 0.0)
    loss = -delta.where(delta < 0, 0.0)
    avg_gain = gain.ewm(alpha=1/14, adjust=False).mean()
    avg_loss = loss.ewm(alpha=1/14, adjust=False).mean()
    df['RSI'] = 100 - (100 / (1 + (avg_gain / avg_loss)))

    df['5_Avg_Volume'] = df['Volume'].rolling(5).mean().replace(0, 1e-9)
    df['Volume_Ratio'] = df['Volume'] / df['5_Avg_Volume']

    df['TR'] = np.maximum(df['High'] - df['Low'],
                          np.maximum(abs(df['High'] - df['Close'].shift()),
                                     abs(df['Low'] - df['Close'].shift())))
    df['ATR'] = df['TR'].ewm(span=14, adjust=False).mean()

    return df.dropna()

# ============================
# Market Trend
# ============================
def get_market_trend():
    try:
        btc_price = exchange.fetch_ticker('BTC/EUR')['close']
        btc_weekly = exchange.fetch_ohlcv('BTC/EUR', '1w', limit=4)
        change = (btc_price - btc_weekly[0][1]) / btc_weekly[0][1]

        if change > 0.1:
            return 'bullish'
        elif change < -0.1:
            return 'bearish'
        return 'neutral'
    except:
        return 'neutral'

# ============================
# ATR Threshold (percentile-based)
# ============================
def calculate_atr_threshold():
    atr_values = []
    now = exchange.milliseconds()

    all_ohlcv = {
        symbol: exchange.fetch_ohlcv(symbol, '1d', since=now - 30*86400*1000, limit=30)
        for symbol in active_pairs
    }

    for symbol, ohlcv in all_ohlcv.items():
        try:
            df = pd.DataFrame(ohlcv, columns=['Timestamp', 'Open', 'High', 'Low', 'Close', 'Volume'])

            if len(df) < 14:
                continue

            df['TR'] = np.maximum(df['High'] - df['Low'],
                                  np.maximum(abs(df['High'] - df['Close'].shift()),
                                             abs(df['Low'] - df['Close'].shift())))
            df['ATR'] = df['TR'].ewm(span=14, adjust=False).mean()

            if not df.empty:
                atr_values.append(df['ATR'].dropna().iloc[-1])
        except:
            continue

    return np.percentile(atr_values, 25) if atr_values else 0.002

# ============================
# Real-Time Opportunity Scan
# ============================
def analyze_real_time():
    results = []
    trend = get_market_trend()
    atr_threshold = calculate_atr_threshold()

    for symbol in active_pairs:
        try:
            mapped_symbol = SYMBOL_MAPPING.get(symbol, symbol)
            if mapped_symbol in DELISTED_PAIRS:
                continue

            now = exchange.milliseconds()
            ohlcv = exchange.fetch_ohlcv(mapped_symbol, '1d', since=now - 30*86400*1000, limit=30)

            if len(ohlcv) < 25:
                continue

            df = pd.DataFrame(ohlcv, columns=['Timestamp', 'Open', 'High', 'Low', 'Close', 'Volume'])
            df = calculate_indicators(df)
            if df.empty:
                continue

            latest = df.iloc[-1]
            current_price = exchange.fetch_ticker(mapped_symbol)['close']
            price_deviation = abs(latest['Close'] - current_price) / current_price
            if price_deviation > 0.15:
                continue

            # Volatility control via Coefficient of Variation (CV)
            df['Close_StdDev'] = df['Close'].rolling(window=5).std()
            avg_std = max(df['Close_StdDev'].iloc[-2:].mean(), 1e-9)
            highest_5d = max(df['High'].rolling(window=5).max().iloc[-1], 1e-9)

            cv_close = avg_std / latest['Close']
            cv_profit = avg_std / highest_5d
            if cv_close > VARIANCE_THRESHOLD or cv_profit > VARIANCE_THRESHOLD:
                continue

            # Filtering conditions
            conditions = {
                "ema_crossover": latest['3_EMA'] > latest['10_EMA'],
                "rsi_ok": (38 < latest["RSI"] < 80) if trend == "bullish" else (30 < latest["RSI"] < 65),
                "volume_spike": latest['Volume_Ratio'] > 1.3,
                "atr_valid": latest["ATR"] > atr_threshold,
                "atr_breakout": latest["High"] - latest["Low"] >= latest["ATR"]
            }

            if sum(conditions.values()) >= 3 and current_price <= MAX_TRADE_EUR:
                entry = current_price
                atr = latest['ATR']
                stop = entry - (atr * 2)
                target = entry * (1 + PROFIT_TARGET)

                results.append({
                    "Symbol": mapped_symbol,
                    "Entry": entry,
                    "Stop_Loss": round(stop, 4),
                    "Take_Profit": round(target, 4),
                    "RSI": round(latest['RSI'], 2),
                    "ATR": round(atr, 4),
                    "Vol_Ratio": round(latest['Volume_Ratio'], 1)
                })
        except:
            continue

    return pd.DataFrame(results)

# ============================
# Run it
# ============================
if __name__ == "__main__":
    df = analyze_real_time()
    if not df.empty:
        df.to_csv("opportunities.csv", index=False)
